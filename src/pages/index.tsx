import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import type { Example } from "@prisma/client";

const Home: NextPage = () => {
  const { data, isLoading, isError, error } = trpc.example.hello1.useQuery({
    text: ", hello son hello 1",
    name: "Luis",
    lastname: "Gonzalex",
  });

  const {
    data: dataExplore,
    refetch,
    error: errorServer,
  } = trpc.example.getAllExamplesByServer.useQuery();

  const addNewExample = trpc.example.addExample.useMutation({
    onSuccess: () => refetch(),
  });

  const { mutate, isLoading: isDelete } =
    trpc.example.deleteExample.useMutation({
      onSuccess: () => refetch(),
    });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">This stack uses:</p>
        <div className="mt-3 grid gap-3 pt-3 text-center md:grid-cols-3 lg:w-2/3">
          <TechnologyCard
            name="NextJS"
            description="The React framework for production"
            documentation="https://nextjs.org/"
          />
          <TechnologyCard
            name="TypeScript"
            description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
            documentation="https://www.typescriptlang.org/"
          />
          <TechnologyCard
            name="TailwindCSS"
            description="Rapidly build modern websites without ever leaving your HTML"
            documentation="https://tailwindcss.com/"
          />
          <TechnologyCard
            name="tRPC"
            description="End-to-end typesafe APIs made easy"
            documentation="https://trpc.io/"
          />
          <TechnologyCard
            name="Next-Auth"
            description="Authentication for Next.js"
            documentation="https://next-auth.js.org/"
          />
          <TechnologyCard
            name="Prisma"
            description="Build data-driven JavaScript & TypeScript apps in less time"
            documentation="https://www.prisma.io/docs/"
          />
        </div>
        <button
          type="button"
          onClick={() => {
            addNewExample.mutate();
          }}
        >
          Add Example
        </button>
        <div className="flex w-full items-center justify-center pt-6 text-2xl text-blue-500">
          {data ? <p>{data.greeting}</p> : <p></p>}
          {isLoading ? <p>Loading ..</p> : <p></p>}
          {isError ? <p>Error carnal ..</p> : <p></p>}
          {errorServer?.data && (
            <>
              <pre>
                Error: {JSON.stringify(errorServer.data.zodError, null, 2)}
              </pre>
              {console.log("typeof error.data")}
              {console.log(errorServer.data.zodError?.fieldErrors)}
              {console.log(errorServer.data.zodError?.fieldErrors.text)}
            </>
          )}

          {/* {error ? <p>{error.message}</p> : null} */}
        </div>
        <div>
          {dataExplore && dataExplore.length ? (
            dataExplore.map((examples: Example) => (
              <button
                key={examples.id}
                className={`mt-2 flex flex-col gap-2 border-2 ${
                  isDelete ? "border-gray-300" : "border-red-300"
                }  p-2`}
                onClick={() => {
                  console.log(examples.id);
                  mutate(examples.id);
                }}
                disabled={isDelete}
              >
                <span>{examples.id}</span>
                <span>{new Date(examples.createdAt).toISOString()}</span>
              </button>
            ))
          ) : (
            <span>No hay example</span>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;



type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard: React.FC<TechnologyCardProps> = ({
  name,
  description,
  documentation,
}) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <Link
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </Link>
    </section>
  );
};
